-----------------------------------------------------------------------------
-- Midcraft Commander
-- Author: MewK
-- Version: 0.2
--
-- This program is released under the MIT License (MIT).
-----------------------------------------------------------------------------

local args = { ... }
if # args == 1 and (args[1] == '-h' or args[1] == '?') then
	print('Midcraft Commander 0.2')
	print('')
	print('Keys:')
	print('  Ctrl   Activates the menu') 
	print('  Tab    Activates the integrated shell')
	print('  Space  Selects/deselects an entry')
	return
end

-- Entry types:
--	0 = folder
--	1 = executable file
--	2 = text file
--	3 = virtual file
--	4 = help file

-- TODO:
-- menu shortcuts
-- networking
-- file info
-- format disks
-- open help files
-- config file
-- - editor path
-- - folder default action (run, edit, help)

-- Include additional functions
shell.run('drawing.lib.lua')
shell.run('filesystem.lib.lua')

-- General vars
local running = true
local keyFunctions = {}

-- Terminal vars
local w, h = term.getSize()
local hw = math.floor(w / 2)
local shellEntry = createEntryFromPath(shell.dir())

-- View vars
local views = {}
local _activeView = 1;

-- Virtual entries
local virtualEntries = {}

-- Menu vars
local menuActive = false
local menuFunctions = {}
local menuItemSelection = 0
local subMenuItemSelection = 0

-- Integrated shell vars
local commandHistory = {}

-- Music vars
local playingMusic = nil

-- Clipboard vars
local clipboard = {}
local clipboardAction = 0 -- 0 = none, 1 = copy, 2 = cut

-- Functions

local function activeView() 
	return views[_activeView] 
end

local function activeMenu() 
	return menuFunctions[menuItemSelection] 
end

local function readUserLine(prefix, commandHistory)
	term.setCursorPos(1, h)
	term.clearLine()
	term.write(prefix)

	local line = read(nil, commandHistory)
	return line
end

local function refreshEntries()
	for n, view in ipairs(views) do
		view.entryList = listEntries(view.currentFolder, virtualEntries)
	end
end

local function clearClipboard() 
	clipboard = {}
	clipboardAction = 0
end

local function addToClipboard(entry)
	if not fs.exists(entry.fullpath) then
		return
	end

	local entryIndex = 0
	for index, value in ipairs(clipboard) do
		if value.fullpath == path.fullpath then
			entryIndex = index
			break
		end
	end
	
	if entryIndex > 0 then
		table.remove(clipboard, entryIndex)
		if # clipboard == 0 then
			clipboardAction = 0
		end
	else
		table.insert(clipboard, entry)
	end
end

local function drawScreen()
	term.clear()
	
	-- Draw frame
    drawLabeledLineH(1, 1, hw, views[1].currentFolder.fullpath)
	drawLabeledLineH(hw + 2, 1, hw, views[2].currentFolder.fullpath)
	
	drawLineV(hw + 1, 1, h - 1)
	drawLineV(hw, 1, h - 1)
	
	-- Draw dir lists
	for index, view in ipairs(views) do
		drawEntries(view, clipboard, clipboardAction, buildPath)
	end
	
	-- Draw scroll indicators
	
	-- Left top
	if views[1].scrollOffset > 0 then
		term.setCursorPos(hw, 2)
		term.write('#')
	end
	
	-- Left bottom
	if # views[1].entryList - views[1].scrollOffset > views[1].height then
		term.setCursorPos(hw, h - 2)
		term.write('#')
	end
	
	-- Right top
	if views[2].scrollOffset > 0 then
		term.setCursorPos(hw + 1, 2)
		term.write('#')
	end
	
	-- Right bottom
	if # views[2].entryList - views[2].scrollOffset > views[2].height then
		term.setCursorPos(hw + 1, h - 2)
		term.write('#')
	end
		
	-- Draw menu (drawn last to overwrite views if necesary)
	drawMenu(1, h, menuFunctions, menuItemSelection, subMenuItemSelection)
end

-- Virtual entries

-- Music folder
virtualEntries = {
	createEntry('/', 'music', 0, function(_this)
		local discs = {}
		for index, side in ipairs(redstone.getSides()) do
			if disk.isPresent(side) and disk.hasAudio(side) then
				-- Music entry
				table.insert(discs, createEntry(
					'/music', 
					disk.getAudioTitle(side), 
					3, 
					function(__this)
						if __this.meta and __this.meta.side and disk.isPresent(__this.meta.side) and disk.hasAudio(__this.meta.side) then
							if _this.meta.playing and _this.meta.playing == __this.meta.side then
								disk.stopAudio(_this.meta.playing)
								_this.meta.playing = nil
							else
								disk.playAudio(__this.meta.side)
								_this.meta.playing = __this.meta.side
							end
						end
						return __this
					end, 
					{ 
						['side'] = side
					}
				))
			end
		end
		return discs
	end, 
	{ 
		['playing'] = nil
	})
}

-- Views

views = {
	{
		x = 1, 
		y = 2, 
		width = hw - 1, 
		height = h - 3, 
		active = true, 
		scrollOffset = 0, 
		selectionIndex = 1, 
		currentFolder = shellEntry, 
		entryList = listEntries(shellEntry, virtualEntries)
	},
	{
		x = hw + 2, 
		y = 2, 
		width = hw - 1, 
		height = h - 3, 
		active = false, 
		scrollOffset = 0, 
		selectionIndex = 1, 
		currentFolder = shellEntry, 
		entryList = listEntries(shellEntry, virtualEntries)
	}
}

-- Menu

menuFunctions = {
	-- File sub-menu
	{
		name = 'File',
		children = {
			-- Run with parameters command
			{ 
				name = 'Run...',
				action = function(entry)
					-- Files
					if entry.type == 1 then
						local parameter = readUserLine('Parameters: ', nil)
						parseCommand(entry.fullpath..' '..parameter)
					end
				end
			},
			
			-- Edit command
			{ 
				name = 'Edit',
				action = function(entry)
					if entry.type ~= 0 and entry.type ~= 3 then
						runProgram('edit', entry.fullpath)
					end
				end
			},
			
			-- Copy command
			{ 
				name = 'Copy',
				action = function(entry)
					-- If clipboard is empty, use current selection
					if # clipboard == 0 then
						addToClipboard(entry)
					end
				
					if clipboardAction == 1 then
						clipboardAction = 0
					else
						clipboardAction = 1
					end
				end
			},
			
			-- Cut command
			{ 
				name = 'Cut',
				action = function(entry)
					-- If clipboard is empty, use current selection
					if # clipboard == 0 then
						addToClipboard(entry)
					end
					
					if clipboardAction == 2 then
						clipboardAction = 0
					else
						clipboardAction = 2
					end
				end
			},
			
			-- Paste command
			{ 
				name = 'Paste',
				action = function(entry)
					if clipboardAction > 0 then			
						for index, value in ipairs(clipboard) do
							local targetPath = buildPath(activeView().currentFolder, fs.getName(value))
							-- Copy
							if clipboardAction == 1 then
								moveEntry(value, targetPath, true, false)
							
							-- Move
							elseif clipboardAction  == 2 then
								moveEntry(value, targetPath, false, false)
							end
						end
						
						clearClipboard()
						refreshEntries()
					end
				end
			},
			
			-- Delete command
			{ 
				name = 'Delete',
				action = function(entry)
					-- If clipboard is empty, use current selection
					if # clipboard == 0 then
						addToClipboard(entry)
					end
					
					for index, value in ipairs(clipboard) do
						fs.delete(value)
						if value == entry then
							activeView().selectionIndex = activeView().selectionIndex - 1
							if (activeView().selectionIndex < 1) then
								activeView().selectionIndex = 1
							end
						end
					end
					
					clearClipboard()
					refreshEntries()
				end
			},
			
			-- New File command
			{ 
				name = 'Rename',
				action = function(entry)
					local name = readUserLine('New Name: ', nil)
					if name ~= '' then
						moveEntry(entry, buildPath(activeView().currentFolder, name), false, true)
						refreshEntries()
					end
				end
			}
		}
	},
	
	-- System sub-menu
	{
		name = 'System',
		children = {
			-- New File command
			{ 
				name = 'New file',
				action = function(entry)
					local name = readUserLine('Name: ', nil)
					if name ~= '' then
						local file = io.open(buildPath(activeView().currentFolder, name), 'w')
						file:write('')
						file:close()
						
						refreshEntries()
					end
				end
			},
			
			-- New folder command
			{ 
				name = 'New folder',
				action = function(entry)
					local name = readUserLine('Name: ', nil)
					if name ~= '' then
						fs.makeDir(buildPath(activeView().currentFolder, name))
						refreshEntries()
					end
				end
			}
		}
	},
	
	-- Exit command
	{ 
		name = 'Exit',
		action = function(entry)
			running = false
		end
	}
}

-- Keys

keyFunctions = {
	-- Up
	{ 
		code = 200,
		action = function()
			-- Move entry selection
			if not menuActive then
				if activeView().selectionIndex > 1 then
					activeView().selectionIndex = activeView().selectionIndex - 1
					if activeView().selectionIndex <= activeView().scrollOffset then
						activeView().scrollOffset = activeView().scrollOffset - activeView().height
					end
				end
			else
				local _activeMenu = activeMenu()
				if _activeMenu and _activeMenu.children then
					subMenuItemSelection = subMenuItemSelection - 1
					if subMenuItemSelection < 1 then
						subMenuItemSelection = # _activeMenu.children
					end
				end
			end
		end
	},
	
	-- Down
	{ 
		code = 208,
		action = function()
			-- Move entry selection
			if not menuActive then
				if activeView().selectionIndex < # activeView().entryList then
					activeView().selectionIndex = activeView().selectionIndex + 1
					if activeView().selectionIndex > activeView().height + activeView().scrollOffset then
						activeView().scrollOffset = activeView().scrollOffset + activeView().height
					end
				end
			else
				local _activeMenu = activeMenu()
				if _activeMenu and _activeMenu.children then
					subMenuItemSelection = subMenuItemSelection + 1
					if subMenuItemSelection > # _activeMenu.children then
						subMenuItemSelection = 1
					end
				end
			end
		end
	},
	
	-- Left
	{ 
		code = 203,
		action = function()
			-- Change active view
			if not menuActive then
				activeView().active = false
				_activeView = _activeView - 1
				if _activeView < 1 then
					_activeView = # views
				end
				activeView().active = true
				
			-- Move menu selection
			else
				menuItemSelection = menuItemSelection - 1
				if menuItemSelection < 1 then
					menuItemSelection = # menuFunctions
				end
				subMenuItemSelection = 1
			end
		end
	},
	
	-- Right
	{ 
		code = 205,
		action = function()
			-- Change active side
			if not menuActive then
				activeView().active = false
				_activeView = _activeView + 1
				if _activeView > # views then
					_activeView = 1
				end
				activeView().active = true
				
			-- Move menu selection
			else
				menuItemSelection = menuItemSelection + 1
				if menuItemSelection > # menuFunctions then
					menuItemSelection = 1
				end
				subMenuItemSelection = 1
			end
		end
	},
	
	-- Enter
	{ 
		code = 28,
		action = function()
			local entry = activeView().entryList[activeView().selectionIndex]
			-- Run
			if not menuActive then
			
				-- Folder
				if entry.type == 0 then
					if entry.name == '..' then
						entry = createEntryFromPath(buildPath(entry))
					end
					activeView().currentFolder = entry
					activeView().selectionIndex = 1
					activeView().entryList = listEntries(entry, virtualEntries)
					
				-- Executable files
				elseif entry.type == 1 then
					runProgram(entry.fullpath)
					
				-- Text file
				elseif entry.type == 2 then
					runProgram(entry.fullpath)
				
				-- Virtual file
				elseif entry.type == 3 and entry.action then
					entry.action(entry)
					
				-- Help file
				elseif entry.type == 4 then
					runProgram('help', entry.name)
				end
				
				refreshEntries()
				
			-- Menu selection
			else
				local menuItem = menuFunctions[menuItemSelection]
				if menuItem then
					if menuItem.action then
						menuItem.action(entry)
					elseif menuItem.children then
						local subMenuItem = menuItem.children[subMenuItemSelection]
						if subMenuItem and subMenuItem.action then
							subMenuItem.action(entry)
						end
					end
				end
				
				menuActive = false
				menuItemSelection = 0
				subMenuItemSelection = 0
			end
		end
	},
	
	-- Ctrl (menu toggle)
	{ 
		code = 29,
		action = function()
			menuActive = not menuActive
			if menuActive then
				menuItemSelection = 1
				subMenuItemSelection = 1
			else
				menuItemSelection = 0
				subMenuItemSelection = 0
			end
		end
	},
	
	-- Tab (command line toggle)
	{ 
		code = 15,
		action = function()
			local command
			repeat
				command = readUserLine(shell.dir()..'> ', commandHistory)
				if command ~= '' then
					if command ~= commandHistory[# commandHistory] then
						table.insert(commandHistory, command)
					end
					parseCommand(command)
					refreshEntries()
				end
				drawScreen()
			until command == ''
		end
	},
	
	-- Space (selection toggle)
	{ 
		code = 57,
		action = function()
			if not menuActive then
				local entry = activeView().entryList[activeView().selectionIndex]
				addToClipboard(entry)
			end
		end
	}
}

-- Body

drawScreen()

while running do
	local event, param = os.pullEvent('key')
	for index, keyFunction in ipairs(keyFunctions) do
		if keyFunction.code == param then
			keyFunction.action()
			drawScreen()
		end
	end
end

term.clear()
term.setCursorPos(1, 1)