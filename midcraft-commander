-----------------------------------------------------------------------------
-- Midcraft Commander
-- Author: MewK
-- Version: 0.x network beta
--
-- This program is released under the MIT License (MIT).
-----------------------------------------------------------------------------

local args = { ... }
if # args == 1 and (args[1] == '-h' or args[1] == '?') then
	print('Midcraft Commander 0.x network beta')
	print('')
	print('Keys:')
	print('  Ctrl   Activates the menu') 
	print('  Tab    Activates the integrated shell')
	print('  Space  Selects/deselects an entry')
	return
end

-- Entry types:
--	0 = folder
--	1 = program
--	2 = text
--	3 = virtual file
--	4 = help file

-- TODO v1.0
-- networking

-- Include additional functions
shell.run('config.lib.lua')
shell.run('drawing.lib.lua')
shell.run('filesystem.lib.lua')

local activeModem = nil

-- General vars
local running = true
local keyFunctions = {}

-- Terminal vars
local w, h = term.getSize()
local hw = math.floor(w / 2)
local shellEntry = createEntryFromPath(shell.dir())

-- Views
local views = {}
local _activeView = 1;

-- Virtual entries
local virtualEntries = {}

-- Menu
local menuActive = false
local menuFunctions = {}
local menuItemSelection = 0
local subMenuItemSelection = 0

-- Alert window
local window = nil

-- Integrated shell command history
local commandHistory = {}

-- Clipboard
local clipboard = {}
local clipboardAction = 0 -- 0 = none, 1 = copy, 2 = cut

-- Config

local configPath = 'midcraft-commander.conf'
local config = loadConfig(configPath, {
	editor = 'edit',
	helpViewer = 'help',
	folderTypes = {
		['/rom/apis'] = 2,
		['/rom/apis/turtle'] = 2,
		['/rom/help'] = 4
	}
})

-- Functions

local function activeView() 
	return views[_activeView] 
end

local function activeMenu() 
	return menuFunctions[menuItemSelection] 
end

local function hideMenu()
	menuActive = false
	menuItemSelection = 0
	subMenuItemSelection = 0
end

local function showMenu()
	menuActive = true
	menuItemSelection = 1
	subMenuItemSelection = 1
end

local function readUserLine(prefix, commandHistory)
	term.setCursorPos(1, h)
	term.clearLine()
	term.write(prefix)

	local line = read(nil, commandHistory)
	return line
end

local function refreshEntries()
	for n, view in ipairs(views) do
		view.entryList = listEntries(view.currentFolder, virtualEntries, config.folderTypes)
	end
end

local function clearClipboard() 
	clipboard = {}
	clipboardAction = 0
end

local function addToClipboard(entry)
	local entryIndex = 0

	for index, value in ipairs(clipboard) do
		if value.fullpath == entry.fullpath then
			entryIndex = index
			break
		end
	end
	
	if entryIndex > 0 then
		table.remove(clipboard, entryIndex)
		if # clipboard == 0 then
			clipboardAction = 0
		end
	elseif entry.name ~= '..' and fs.exists(entry.fullpath) then
		table.insert(clipboard, entry)
	end
end

local function drawScreen()
	term.clear()
	
	-- Draw frame
    drawLabeledLineH(1, 1, hw - 1, views[1].currentFolder.fullpath, false)
	drawLabeledLineH(hw + 2, 1, hw - 1, views[2].currentFolder.fullpath, false)
	drawLineH(1, h - 1, w, false)
	
	drawLineV(hw + 1, 1, h - 1, true)
	drawLineV(hw, 1, h - 1, true)
	
	-- Draw dir lists
	for index, view in ipairs(views) do
		drawEntries(view, clipboard, clipboardAction, virtualEntries, buildPath)
	end
	
	-- Draw scroll indicators
	
	-- Left top
	if views[1].scrollOffset > 0 then
		term.setCursorPos(hw, 2)
		term.write('#')
	end
	
	-- Left bottom
	if # views[1].entryList - views[1].scrollOffset > views[1].height then
		term.setCursorPos(hw, h - 2)
		term.write('#')
	end
	
	-- Right top
	if views[2].scrollOffset > 0 then
		term.setCursorPos(hw + 1, 2)
		term.write('#')
	end
	
	-- Right bottom
	if # views[2].entryList - views[2].scrollOffset > views[2].height then
		term.setCursorPos(hw + 1, h - 2)
		term.write('#')
	end
		
	-- Draw menu
	drawMenu(1, h, menuFunctions, menuItemSelection, subMenuItemSelection)
	
	-- Draw window
	if window then
		drawBoxCentered(window.w, window.h, window.title, window.text)
	end
end

-- Virtual entries

virtualEntries = {
	-- Music folder
	createEntry('/', 'music', 0, 
		function(_this)
			local discs = {}
			for index, side in ipairs(redstone.getSides()) do
				if disk.isPresent(side) and disk.hasAudio(side) then
					-- Music entry
					table.insert(discs, createEntry(
						_this.fullpath, 
						disk.getAudioTitle(side), 
						3, 
						function(__this)
							if __this.meta and __this.meta.side and disk.isPresent(__this.meta.side) and disk.hasAudio(__this.meta.side) then
								if _this.meta.playing and _this.meta.playing == __this.meta.side then
									disk.stopAudio(_this.meta.playing)
									_this.meta.playing = nil
								else
									disk.playAudio(__this.meta.side)
									_this.meta.playing = __this.meta.side
								end
							end
							return __this
						end, 
						{ 
							['side'] = side
						}
					))
				end
			end
			return discs
		end, 
		{
			['playing'] = nil 
		}
	),
	
	-- Network folder
	createEntry('/', 'network', 0, 
		function(_this)
			local hosts = {}

			-- Request available hosts
			rednet.broadcast('mcom_lookup;'..os.getComputerID())
			
			-- Listen for hosts
			local timeoutTimer = os.startTimer(2)
			while true do
				local event, cid, message = os.pullEvent()

				-- Rednet event
				if event == 'rednet_message' then
					error('Receiving "'..message..'" to '..cid)
					for command, data in string.gmatch(message, "([%w_]+);(%w+)") do
						if command == 'mcom_ready' and data then
							-- Host entry
							table.insert(hosts, createEntry(
								_this.fullpath, 
								'Computer '..data, 
								3, 
								function(__this)
									if __this and __this.meta and __this.meta.cid then										
										-- Show window
										local _text = {
											'Computer-ID:',
											__this.meta.cid,
										}
										window = { w = 40, h = # _text + 4, title = 'Info', text = _text }
										hideMenu()
										drawScreen()
										os.pullEvent('key')
										window = nil
									end
								end, 
								{ 
									['cid'] = data
								}
							))
						end
					end
					
				-- Timer event
				elseif event == 'timer' and cid == timeoutTimer then
					break
				end
			end	
			return hosts
		end,
		{
			['sending'] = nil,
			['receiving'] = nil		
		}
	)
}

-- Views

views = {
	{
		x = 1, 
		y = 2, 
		width = hw - 1, 
		height = h - 3, 
		active = true, 
		scrollOffset = 0, 
		selectionIndex = 1, 
		currentFolder = shellEntry, 
		entryList = listEntries(shellEntry, virtualEntries, config.folderTypes)
	},
	{
		x = hw + 2, 
		y = 2, 
		width = hw - 1, 
		height = h - 3, 
		active = false, 
		scrollOffset = 0, 
		selectionIndex = 1, 
		currentFolder = shellEntry, 
		entryList = listEntries(shellEntry, virtualEntries, config.folderTypes)
	}
}

-- Menu

menuFunctions = {
	-- File sub-menu
	{
		name = 'File',
		children = {
			-- Run with parameters command
			{ 
				name = 'Run...',
				param = 19, -- r
				action = function(entry)
					-- Files
					if entry.type == 1 then
						local parameter = readUserLine('Parameters: ', nil)
						parseCommand(entry.fullpath..' '..parameter)
					end
				end
			},
			
			-- Edit command
			{ 
				name = 'Edit',
				param = 18, -- e
				action = function(entry)
					if entry.type ~= 0 and entry.type ~= 3 then
						runProgram(config.editor, entry.fullpath)
					end
				end
			},
			
			-- Copy command
			{ 
				name = 'Copy',
				param = 46, -- c
				action = function(entry)
					-- If clipboard is empty, use current selection
					if # clipboard == 0 then
						addToClipboard(entry)
					end
				
					if clipboardAction == 1 then
						clipboardAction = 0
					else
						clipboardAction = 1
					end
				end
			},
			
			-- Cut command
			{ 
				name = 'Cut',
				param = 45, -- x
				action = function(entry)
					-- If clipboard is empty, use current selection
					if # clipboard == 0 then
						addToClipboard(entry)
					end
					
					if clipboardAction == 2 then
						clipboardAction = 0
					else
						clipboardAction = 2
					end
				end
			},
			
			-- Paste command
			{ 
				name = 'Paste',
				param = 47, -- v
				action = function(entry)
					if clipboardAction > 0 then			
						for index, _entry in ipairs(clipboard) do
							local targetPath = buildPath(activeView().currentFolder, _entry.name)
							-- Copy
							if clipboardAction == 1 then
								moveEntry(_entry, targetPath, true, false)
							
							-- Move
							elseif clipboardAction  == 2 then
								moveEntry(_entry, targetPath, false, false)
							end
						end
						
						clearClipboard()
						refreshEntries()
					end
				end
			},
			
			-- Rename command
			{ 
				name = 'Rename',
				action = function(entry)
					local name = readUserLine('New Name: ', nil)
					if name ~= '' then
						moveEntry(entry, buildPath(activeView().currentFolder, name), false, true)
						refreshEntries()
					end
				end
			},
			
			-- Delete command
			{ 
				name = 'Delete',
				param = 32, -- d
				action = function(entry)
					-- If clipboard is empty, use current selection
					if # clipboard == 0 then
						addToClipboard(entry)
					end
					
					for index, _entry in ipairs(clipboard) do
						if deleteEntry(_entry) and _entry.fullpath == entry.fullpath then
							activeView().selectionIndex = activeView().selectionIndex - 1
							if (activeView().selectionIndex < 1) then
								activeView().selectionIndex = 1
							end
						end
					end
					
					clearClipboard()
					refreshEntries()
				end
			},
			
			-- Format command
			{ 
				name = 'Format',
				param = 33, -- f
				action = function(entry)
					local confirmation = readUserLine('Delete all files in this folder/disc? (y/n): ', nil)
					if confirmation == 'y' then
						formatFolder(entry)
						refreshEntries()
					end
				end
			},
			
			-- Info command
			{ 
				name = 'Info',
				param = 23, -- i
				action = function(entry)
					local _text = {}
					local __text = {}
					
					-- Path
					table.insert(_text, 'Path:')
					table.insert(_text, entry.fullpath)
					
					-- Filesize & drive
					if entry.type > 0 and fs.exists(entry.fullpath) then
						table.insert(_text, 'Size:')
						table.insert(_text, fs.getSize(entry.fullpath)..' bytes')
					end
					
					-- Virtual entry
					if entry.type == 3 and entry.info then
						-- Merge arrays
						for index, line in ipairs(entry.info) do
							table.insert(_text, line)
						end
					end
					
					-- Side
					if entry.meta and entry.meta.side then
						table.insert(_text, 'Side:')
						table.insert(_text, entry.meta.side)
					end
					
					-- Readonly
					if fs.exists(entry.fullpath) then
						table.insert(_text, 'Drive:')
						table.insert(_text, fs.getDrive(entry.fullpath))
						table.insert(_text, 'Read Only:')
						table.insert(_text, ''..(fs.isReadOnly(entry.fullpath) and 'true' or 'false'))
					
					end
					
					window = { w = 40, h = # _text + 4, title = 'Info', text = _text }
					hideMenu()
					drawScreen()
					os.pullEvent('key')
					window = nil
				end
			}
		}
	},
	
	-- System sub-menu
	{
		name = 'System',
		children = {
			-- New File command
			{ 
				name = 'New file',
				action = function(entry)
					local name = readUserLine('Name: ', nil)
					if name ~= '' then
						local file = io.open(buildPath(activeView().currentFolder, name), 'w')
						file:write(' ')
						file:close()
						
						refreshEntries()
					end
				end
			},
			
			-- New folder command
			{ 
				name = 'New folder',
				action = function(entry)
					local name = readUserLine('Name: ', nil)
					if name ~= '' then
						fs.makeDir(buildPath(activeView().currentFolder, name))
						refreshEntries()
					end
				end
			},
			
			-- Open Network command
			{ 
				name = 'Open Connection',
				action = function(entry)
					activeModem = nil
					for index, side in ipairs(redstone.getSides()) do
						if peripheral.isPresent(side) and peripheral.getType(side) == 'modem' then
							activeModem = side
							break
						end
					end

					local _text = {  }
					if activeModem then
						rednet.open(activeModem)
						table.insert(_text, 'Connection on '..activeModem..' modem opened.')
					else
						table.insert(_text, 'Error: No modem available!')
					end
					
					-- Show window
					window = { w = 40, h = # _text + 4, title = 'Open Connection', text = _text }
					hideMenu()
					drawScreen()
					
					sleep(2)
					
					window = nil
				end
			}
		}
	},
	
	-- Exit command
	{ 
		name = 'Exit',
		action = function(entry)
			running = false
		end
	}
}

-- Keys

keyFunctions = {
	-- Up
	{ 
		code = 200,
		action = function()
			-- Move entry selection
			if not menuActive then
				if activeView().selectionIndex > 1 then
					activeView().selectionIndex = activeView().selectionIndex - 1
					if activeView().selectionIndex <= activeView().scrollOffset then
						activeView().scrollOffset = activeView().scrollOffset - activeView().height
					end
				end
			else
				local _activeMenu = activeMenu()
				if _activeMenu and _activeMenu.children then
					subMenuItemSelection = subMenuItemSelection - 1
					if subMenuItemSelection < 1 then
						subMenuItemSelection = # _activeMenu.children
					end
				end
			end
		end
	},
	
	-- Down
	{ 
		code = 208,
		action = function()
			-- Move entry selection
			if not menuActive then
				if activeView().selectionIndex < # activeView().entryList then
					activeView().selectionIndex = activeView().selectionIndex + 1
					if activeView().selectionIndex > activeView().height + activeView().scrollOffset then
						activeView().scrollOffset = activeView().scrollOffset + activeView().height
					end
				end
			else
				local _activeMenu = activeMenu()
				if _activeMenu and _activeMenu.children then
					subMenuItemSelection = subMenuItemSelection + 1
					if subMenuItemSelection > # _activeMenu.children then
						subMenuItemSelection = 1
					end
				end
			end
		end
	},
	
	-- Left
	{ 
		code = 203,
		action = function()
			-- Change active view
			if not menuActive then
				activeView().active = false
				_activeView = _activeView - 1
				if _activeView < 1 then
					_activeView = # views
				end
				activeView().active = true
				
			-- Move menu selection
			else
				menuItemSelection = menuItemSelection - 1
				if menuItemSelection < 1 then
					menuItemSelection = # menuFunctions
				end
				subMenuItemSelection = 1
			end
		end
	},
	
	-- Right
	{ 
		code = 205,
		action = function()
			-- Change active side
			if not menuActive then
				activeView().active = false
				_activeView = _activeView + 1
				if _activeView > # views then
					_activeView = 1
				end
				activeView().active = true
				
			-- Move menu selection
			else
				menuItemSelection = menuItemSelection + 1
				if menuItemSelection > # menuFunctions then
					menuItemSelection = 1
				end
				subMenuItemSelection = 1
			end
		end
	},
	
	-- Enter
	{ 
		code = 28,
		action = function()
			local entry = activeView().entryList[activeView().selectionIndex]
			-- Run
			if not menuActive then
			
				-- Folder
				if entry.type == 0 then
					if entry.name == '..' then
						entry = createEntry(entry.fullpath)
					end
					activeView().currentFolder = entry
					activeView().selectionIndex = 1
					activeView().entryList = listEntries(entry, virtualEntries, config.folderTypes)
					
				-- Executable files
				elseif entry.type == 1 then
					runProgram(entry.fullpath)
					
				-- Text file
				elseif entry.type == 2 then
					runProgram(config.editor, entry.fullpath)
				
				-- Virtual file
				elseif entry.type == 3 and entry.action then
					entry.action(entry)
				
				-- Help file
				elseif entry.type == 4 then
					runProgram(config.helpViewer, entry.name)
				end
				
				refreshEntries()
				
			-- Menu selection
			else
				local menuItem = menuFunctions[menuItemSelection]
				if menuItem then
					if menuItem.action then
						menuItem.action(entry)
					elseif menuItem.children then
						local subMenuItem = menuItem.children[subMenuItemSelection]
						if subMenuItem and subMenuItem.action then
							subMenuItem.action(entry)
						end
					end
				end
				
				hideMenu()
			end
		end
	},
	
	-- Ctrl (menu toggle)
	{ 
		code = 29,
		action = function()
			if menuActive then
				hideMenu()
			else
				showMenu()
			end
		end
	},
	
	-- Tab (command line toggle)
	{ 
		code = 15,
		action = function()
			local command
			repeat
				command = readUserLine(shell.dir()..'> ', commandHistory)
				if command ~= '' then
					if command ~= commandHistory[# commandHistory] then
						table.insert(commandHistory, command)
					end
					parseCommand(command)
					refreshEntries()
				end
				drawScreen()
			until command == ''
		end
	},
	
	-- Space (selection toggle)
	{ 
		code = 57,
		action = function()
			if not menuActive then
				local entry = activeView().entryList[activeView().selectionIndex]
				addToClipboard(entry)
			end
		end
	}
}

-- Draw screen
drawScreen()

-- Fetch key events
while running do
	local event, param1, param2 = os.pullEvent()
	
	-- Rednet event
	if event == 'rednet_message' then
		-- param1 is the computer-id
		-- param2 is the message
		
		if param2 then
			local command, _param1 = string.gmatch(param2, "([%w_]+);(%w+)")
			if command == 'mcom_lookup' then
				error('Sending "mcom_ready;'..os.getComputerID()..'" to '..param1..'/'.._param1)
				rednet.send(param1, 'mcom_ready;'..os.getComputerID())
			end
		end
	
	-- Key event
	elseif event == 'key' then
		-- param1 is the key-code
	
		-- Key functions
		for index, keyFunction in ipairs(keyFunctions) do
			if keyFunction.code == param1 then
				keyFunction.action()
				drawScreen()
				break
			end
		end
		
		-- Menu shortcuts
		for index, menuFunction in ipairs(menuFunctions) do
			if menuFunction.children then
				for subIndex, subMenuFunction in ipairs(menuFunction.children) do
					if subMenuFunction.param and subMenuFunction.param == param1 then
						subMenuFunction.action(activeView().entryList[activeView().selectionIndex])
						hideMenu()
						drawScreen()
						break
					end
				end
			end
		end
	end
end

-- Write Config
saveConfig(configPath, config)

-- Clear screen
term.clear()
term.setCursorPos(1, 1)