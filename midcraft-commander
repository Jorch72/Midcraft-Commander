-----------------------------------------------------------------------------
-- Midcraft Commander
-- Author: MewK
-- Version: 0.2
--
-- This program is released under the MIT License (MIT).
-----------------------------------------------------------------------------

local args = { ... }
if # args == 1 and (args[1] == '-h' or args[1] == '?') then
	print('Midcraft Commander 0.2')
	print('')
	print('Keys:')
	print('  Ctrl   Activates the menu') 
	print('  Tab    Activates the integrated shell')
	print('  Space  Selects/deselects an entry')
	print('Menu:')
	print('  Run    Run with parameters command') 
	print('  Ed     Edit command')
	print('  Cp     Copy command') 
	print('  Ct     Cut command')
	print('  Pst    Paste command') 
	print('  Dl     Delete command') 
	print('  Rn     Rename Command') 
	print('  NwFl   New file command') 
	print('  NwDr   New directory command') 
	print('  Qt     Exit command')
	return
end
-- drop down menus
-- shortcuts

-- config file
-- - editor path
-- - folder action (run, edit, help)
shell.run('midcraft-commander-libs/drawing.lua')
shell.run('midcraft-commander-libs/filesystem.lua')

local running = true

local w, h = term.getSize()
local hw = math.floor(w / 2)

local views = {}
views[1] = { x = 1, y = 2, width = hw - 1, height = h - 3, active = true, scrollOffset = 0, selectionIndex = 1, currentDirectory = '', entryList = {} }
views[2] = { x = hw + 2, y = 2, width = hw - 1, height = h - 3, active = false, scrollOffset = 0, selectionIndex = 1, currentDirectory = '', entryList = {} }
local _activeView = 1;

local keyFunctions = {}

local menuActive = false
local menuFunctions = {}
local menuItemSelection = 0

local commandHistory = {}

local clipboard = {}
local clipboardAction = 0 -- 0 = none, 1 = copy, 2 = cut

-- Functions

local function activeView() 
	return views[_activeView] 
end

local function readUserLine(prefix, commandHistory)
	term.setCursorPos(1, h)
	term.clearLine()
	term.write(prefix)

	local line = read(nil, commandHistory)
	return line
end

local function refreshEntries()
	for n, view in ipairs(views) do
		view.entryList = listEntries(view.currentDirectory)
	end
end

local function clearClipBoard() 
	clipboard = {}
	clipboardAction = 0
end

local function drawScreen()
	term.clear()

	-- Draw frame
    drawLabeledLineH(1, 1, hw, views[1].currentDirectory)
	drawLabeledLineH(hw + 2, 1, hw, views[2].currentDirectory)
	
	drawLineH(1, h - 1, w)
	
	drawLineV(hw + 1, 1, h - 1)
	drawLineV(hw, 1, h - 1)
	
	-- Draw dir lists
	for index, view in ipairs(views) do
		drawEntries(view, clipboard, clipboardAction, buildPath)
	end
	
	-- Draw menu
	drawMenu(3, h, menuFunctions, menuItemSelection)
	
	-- Draw scroll indicators
	
	-- Left top
	if views[1].scrollOffset > 0 then
		term.setCursorPos(hw, 2)
		term.write('#')
	end
	
	-- Left bottom
	if # views[1].entryList - views[1].scrollOffset > views[1].height then
		term.setCursorPos(hw, h - 2)
		term.write('#')
	end
	
	-- Right top
	if views[2].scrollOffset > 0 then
		term.setCursorPos(hw + 1, 2)
		term.write('#')
	end
	
	-- Right bottom
	if # views[2].entryList - views[2].scrollOffset > views[2].height then
		term.setCursorPos(hw + 1, h - 2)
		term.write('#')
	end
end

-- Menu

menuFunctions = {
	-- Run with parameters command
	{ 
		name = 'Run',
		action = function(path)
			local parameter = readUserLine('Parameters: ', nil)
			parseCommand(path..' '..parameter)
		end
	},
	
	-- Edit command
	{ 
		name = 'Ed',
		action = function(path)
			if not fs.isDir(path) then
				runProgram('edit', path)
			end
		end
	},
	
	-- Copy command
	{ 
		name = 'Cp',
		action = function(path)
			if clipboardAction == 1 then
				clipboardAction = 0
			else
				clipboardAction = 1
			end
		end
	},
	
	-- Cut command
	{ 
		name = 'Ct',
		action = function(path)
			if clipboardAction == 2 then
				clipboardAction = 0
			else
				clipboardAction = 2
			end
		end
	},
	
	-- Paste command
	{ 
		name = 'Pst',
		action = function(path)
			if clipboardAction > 0 then			
				for index, value in ipairs(clipboard) do
					local targetPath = buildPath(activeView().currentDirectory, fs.getName(value))
					-- Copy
					if clipboardAction == 1 then
						moveEntry(value, targetPath, true, false)
					
					-- Move
					elseif clipboardAction  == 2 then
						moveEntry(value, targetPath, false, false)
					end
				end
				
				clearClipBoard()
				refreshEntries()
			end
		end
	},
	
	-- Delete command
	{ 
		name = 'Dl',
		action = function(path)
			fs.delete(path)
			activeView().selectionIndex = activeView().selectionIndex - 1
			if (activeView().selectionIndex < 1) then
				activeView().selectionIndex = 1
			end
			refreshEntries()
		end
	},
	
	-- New File command
	{ 
		name = 'Rn',
		action = function(path)
			local name = readUserLine('New Name: ', nil)
			if name ~= '' then
				moveEntry(path, buildPath(activeView().currentDirectory, name), false, true)
				refreshEntries()
			end
		end
	},
	
	-- New File command
	{ 
		name = 'NwFl',
		action = function(path)
			local name = readUserLine('Name: ', nil)
			if name ~= '' then
				path = buildPath(activeView().currentDirectory, name)
				local file = io.open(path, 'w')
				file:write('')
				file:close()
				refreshEntries()
			end
		end
	},
	
	-- New directory command
	{ 
		name = 'NwDr',
		action = function(path)
			local name = readUserLine('Name: ', nil)
			if name ~= '' then
				path = buildPath(activeView().currentDirectory, name)
				fs.makeDir(path)
				refreshEntries()
			end
		end
	},
	
	-- Exit command
	{ 
		name = 'Qt',
		action = function(path)
			running = false
		end
	}
}

-- Keys

keyFunctions = {
	-- Up
	{ 
		code = 200,
		action = function()
			-- Move entry selection
			if not menuActive then
				if activeView().selectionIndex > 1 then
					activeView().selectionIndex = activeView().selectionIndex - 1
					if activeView().selectionIndex <= activeView().scrollOffset then
						activeView().scrollOffset = activeView().scrollOffset - activeView().height
					end
				end
			end
		end
	},
	
	-- Down
	{ 
		code = 208,
		action = function()
			-- Move entry selection
			if not menuActive then
				if activeView().selectionIndex < # activeView().entryList then
					activeView().selectionIndex = activeView().selectionIndex + 1
					if activeView().selectionIndex > activeView().height + activeView().scrollOffset then
						activeView().scrollOffset = activeView().scrollOffset + activeView().height
					end
				end
			end
		end
	},
	
	-- Left
	{ 
		code = 203,
		action = function()
			-- Change active side
			if not menuActive then
				if _activeView == 2 then
					activeView().active = false
					_activeView = 1
					activeView().active = true
				end
				
			-- Move menu selection
			else
				menuItemSelection = menuItemSelection - 1
				if menuItemSelection < 1 then
					menuItemSelection = # menuFunctions
				end
			end
		end
	},
	
	-- Right
	{ 
		code = 205,
		action = function()
			-- Change active side
			if not menuActive then
				if _activeView == 1 then
					activeView().active = false
					_activeView = 2
					activeView().active = true
				end
				
			-- Move menu selection
			else
				menuItemSelection = menuItemSelection + 1
				if menuItemSelection > # menuFunctions then
					menuItemSelection = 1
				end
			end
		end
	},
	
	-- Enter
	{ 
		code = 28,
		action = function()
			local targetPath = buildPath(activeView().currentDirectory, activeView().entryList[activeView().selectionIndex])
			-- Run
			if not menuActive then
				local newEntryList = nil
				
				if fs.exists(targetPath) then
					if fs.isDir(targetPath) then
						newEntryList = listEntries(targetPath)
						activeView().currentDirectory = targetPath
						activeView().selectionIndex = 1
						activeView().entryList = newEntryList
					else
						runProgram(targetPath)
						refreshEntries()
					end
				end
				
			-- Menu selection
			else
				for index, menuFunction in ipairs(menuFunctions) do
					if index == menuItemSelection then
						menuFunction.action(targetPath)
					end
				end
				
				menuActive = false
				menuItemSelection = 0
			end
		end
	},
	
	-- Ctrl (menu toggle)
	{ 
		code = 29,
		action = function()
			menuActive = not menuActive
			if menuActive then
				menuItemSelection = 1
			else
				menuItemSelection = 0
			end
		end
	},
	
	-- Tab (command line toggle)
	{ 
		code = 15,
		action = function()
			local command
			repeat
				command = readUserLine(shell.dir()..'> ', commandHistory)
				if command ~= '' then
					if command ~= commandHistory[# commandHistory] then
						table.insert(commandHistory, command)
					end
					parseCommand(command)
					refreshViews()
				end
			until command == ''
		end
	},
	
	-- Space (selection toggle)
	{ 
		code = 57,
		action = function()
			if not menuActive then
				local entry = activeView().entryList[activeView().selectionIndex]
				local targetPath = buildPath(activeView().currentDirectory, entry)
				
				if entry == '/..' then
					return
				end
				
				local entryIndex = 0
				for index, value in ipairs(clipboard) do
					if value == targetPath then
						entryIndex = index
						break
					end
				end
				
				if entryIndex > 0 then
					table.remove(clipboard, entryIndex)
					if # clipboard == 0 then
						clipboardAction = 0
					end
				else
					table.insert(clipboard, targetPath)
				end
			end
		end
	}
}

-- Body

for index, view in ipairs(views) do
	view.currentDirectory = buildPath(shell.dir(), nil);
	view.entryList = listEntries(view.currentDirectory);
end

drawScreen()

while running do
	local event, param = os.pullEvent('key')
	for index, keyFunction in ipairs(keyFunctions) do
		if keyFunction.code == param then
			keyFunction.action()
			drawScreen()
		end
	end
end

term.clear()
term.setCursorPos(1, 1)